using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Xml.Linq;
using NUnit.Framework;

namespace NUnitProjectGenerator
{
    public static class Helpers
    {
        public static IEnumerable<string> GetTestAssemblies(string RootDirectory)
        {
            var AllAssembliesInDirectory = Directory.GetFiles(RootDirectory, "*.dll", SearchOption.AllDirectories);
            var TestDlls = new Dictionary<string, string>();

            foreach (var Dll in AllAssembliesInDirectory)
            {
                if (!ContainsTests(Dll))
                {
                    break;
                }

                var AssemblyName = Path.GetFileNameWithoutExtension(Dll) ?? string.Empty;
                if (!TestDlls.ContainsKey(AssemblyName))
                {
                    TestDlls.Add(AssemblyName, Dll);
                }
            }
            return TestDlls.Select(x => x.Value).ToArray();
        }

        public static void CreateProjectFile(IEnumerable<string> Assemblies, string OutputDirectory)
        {
            var Document = new XElement("NUnitProject");
            Document.Add(new XElement("Settings", new object[] {
                new XAttribute("activeconfig", "Debug"),
                new XAttribute("processModel", "Default"),
                new XAttribute("domainUsage", "Default")
            }));

            var ConfigSection = new XElement("Config", new object[] {
                new XAttribute("name", "Debug"),
                new XAttribute("binpathtype", "Auto")
            });

            foreach (var Assembly in Assemblies)
            {
                ConfigSection.Add(new XElement("assembly", new XAttribute("path", Assembly)));
            }

            Document.Add(ConfigSection);
            File.WriteAllText(OutputDirectory + "//AutogeneratedProject.nunit", Document.ToString());
            Console.WriteLine("NUnit file autogenerated and output to location: {0}", OutputDirectory);
        }
        
        private static bool ContainsTests(string Dll)
        {
            var LoadedAssembly = Assembly.LoadFrom(Dll);

            return LoadedAssembly.GetReferencedAssemblies().Any(x => x.Name.Equals("nunit.framework"))
                && LoadedAssembly.GetTypes().Any(x => Attribute.IsDefined(x, typeof(TestFixtureAttribute)));
        }
    }
}
